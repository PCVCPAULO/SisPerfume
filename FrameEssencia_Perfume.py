"""Subclass of FrameEssencias_Perfume, which is generated by wxFormBuilder."""

import wx
import guiperfumes
import db


# Implementing FrameEssencia_Perfume
class FrameEssencia_Perfume(guiperfumes.FrameEssencia_Perfume):
	def __init__( self, parent ):
		guiperfumes.FrameEssencia_Perfume.__init__( self, parent )
	# Essa método cria uma linha vazia na tabela para permitir que o usuário realização a edição
	def adicionarLinha(self, event):
		self.criarLinha()

	def salvarVinculo( self, event ):
		essencia_perfume=[]      #Cria uma lista vazia de perfumes
		for i in range(0,self.gridEssencia_Perfume.GetNumberRows()):     #Percorre todas a linhas do grid
			essencia_perfume.append([])             #em Cada linha adicionamos uma lista vazia, para que possamos adicionar os dados do perfume
			for j in range(0,self.gridEssencia_Perfume.GetNumberCols()): #Percorre todas as colunas da tabela
				essencia_perfume[i].append(self.gridEssencia_Perfume.GetCellValue(col=j,row=i)) #Adiciona na lista de perfumes, cada coluna com as informações exibidas
		status,message=db.salvarVinculo(listaEssencia_Perfume=essencia_perfume) #Chama a função salvarEssencia_Perfume, passando a lista de perfumes
		if status:
			wx.MessageBox(message="Registro(s) de vinculos Salvo(s) com Sucesso",caption="SysPerfume",style=wx.OK|wx.ICON_INFORMATION)
		else:
			wx.MessageBox(message="Erro ao Salvar vinculo de Essências e Perfumes",caption="SysPerfume",style=wx.OK|wx.ICON_ERROR)
		#Recarrega a tabela
		self.exibirTabela()

	#Essa função atualiza o grid de essencia_perfume
	def exibirTabela(self):
		essencia_perfume=db.listarPerfumes() #Recupera a lista de essencia_perfumes
		if self.gridEssencia_Perfume.GetNumberRows()!=0: #Se o grid não for vazio, delete todas as linhas
			self.gridEssencia_Perfume.DeleteRows(pos=0,numRows=self.gridEssencia_Perfume.GetNumberRows())
		for essencia_perfume in essencia_perfume: #Para cada perfume da minha lista, crie uma nova linha, passando os dados retornados
			self.criarLinha(id_perfume=essencia_perfume[0],nome_perfume=essencia_perfume[1],quantidade=essencia_perfume[2],volume=essencia_perfume[3],marca=essencia_perfume[4],fixacao=essencia_perfume[5])

	def exibirFrame( self, event ):
		self.exibirTabela() #Ao abrir a janela, exiba a lista de perfumes



	'''
	Esse método insere uma nova linha no grid. Caso o parâmetro id_perfume seja None, ele insere uma linha em branco
	'''
	def criarLinha(self,id=None,id_perfume=None,nome_perfume=None,quantidade=None,marca=None,fixacao=None,volume=None,essencia=None):
		self.gridEssencia_Perfume.AppendRows(1)     #Adiciona uma linha
		linha=self.gridEssencia_Perfume.GetNumberRows()-1      #Pega qual o número da linha estamos inserindo
		self.gridEssencia_Perfume.SetReadOnly(linha, 0, True)  # Define que a primeira coluna(ID) é do tipo somente leitura
		self.gridEssencia_Perfume.SetCellEditor(linha,3,wx.grid.GridCellNumberEditor(min=1,max=1000)) #Define que a coluna quantidade só pode receber inteiros entre 1 e 1000
		'''
			Aqui usamos um recurso avançado do componente wxGrid. 
			Especificamente, as colunas Volume, Marca e Fixacoes,
			precisam apresentar o conteúdos das respectivas tabelas, para que o usuário escolha qual quer vincular ao perfume. 
			No caso específico do Volume, precisamos informar quais as opções(choices) o usuário poderá escolher. Essas opções são formadas por
			uma lista de strings(texto), que nesse caso são os dados da coluna nome da tabela Volume.
		'''
#		self.gridEssencia_Perfume.SetCellEditor(linha,1,wx.grid.GridCellChoiceEditor(choices=db.listarPerfumesID()))
		self.gridEssencia_Perfume.SetCellEditor(linha,2,wx.grid.GridCellChoiceEditor(choices=db.listarPerfumesNome()))
		self.gridEssencia_Perfume.SetCellEditor(linha,4,wx.grid.GridCellChoiceEditor(choices=db.listarVolumeNome()))
		self.gridEssencia_Perfume.SetCellEditor(linha,5,wx.grid.GridCellChoiceEditor(choices=db.listarMarcaNome()))
		self.gridEssencia_Perfume.SetCellEditor(linha,6,wx.grid.GridCellChoiceEditor(choices=db.listarFixacaoNome()))
		self.gridEssencia_Perfume.SetCellEditor(linha,7,wx.grid.GridCellChoiceEditor(choices=db.listarEssenciaNome()))

		if id: #Se o id foi passado, significa que podemos atribuir o conteúdo as células do grid
			self.gridEssencia_Perfume.SetCellValue(linha,0,str(id))
			self.gridEssencia_Perfume.SetCellValue(linha,1,str(id_perfume))
			self.gridEssencia_Perfume.SetCellValue(linha,2, nome_perfume)
			self.gridEssencia_Perfume.SetCellValue(linha,3, str(quantidade))
			self.gridEssencia_Perfume.SetCellValue(linha,4, volume)
			self.gridEssencia_Perfume.SetCellValue(linha,6, marca)
			self.gridEssencia_Perfume.SetCellValue(linha,6, fixacao)
			self.gridEssencia_Perfume.SetCellValue(linha,7, essencia)

	def atualizarGrid(self):
		if (self.gridEssencia_Perfume.GetNumberRows()>0):
			self.gridEssencia_Perfume.DeleteRows(0,self.gridEssencia_Perfume.GetNumberRows()) #Limpa a tabela
		essenciaP=db.listarEssencia_Perfume() #Chama a função listar Essências e Perfumes, retornando a lista de vinculos existentes
		for essenciaP in essenciaP:
			self.gridEssencia_Perfume.AppendRows(1)#Adiciona uma linha em branco
			self.gridEssencia_Perfume.SetCellValue(self.gridEssencia_Perfume.GetNumberRows()-1,0,str(essenciaP[0])) #adicione o id
			self.gridEssencia_Perfume.SetCellValue(self.gridEssencia_Perfume.GetNumberRows()-1,0,str(essenciaP[1])) #adicione o ID de Perfumes
			self.gridEssencia_Perfume.SetCellValue(self.gridEssencia_Perfume.GetNumberRows()-1,0,str(essenciaP[2])) #adicione o nome de Perfumes
			self.gridEssencia_Perfume.SetCellValue(self.gridEssencia_Perfume.GetNumberRows()-1,0,str(essenciaP[3])) #adicione o Qtd de Perfumes
			self.gridEssencia_Perfume.SetCellValue(self.gridEssencia_Perfume.GetNumberRows()-1,0,str(essenciaP[4])) #adicione o volume de Perfumes
			self.gridEssencia_Perfume.SetCellValue(self.gridEssencia_Perfume.GetNumberRows()-1,0,str(essenciaP[5])) #adicione o marca de Perfumes
			self.gridEssencia_Perfume.SetCellValue(self.gridEssencia_Perfume.GetNumberRows()-1,0,str(essenciaP[6])) #adicione o fixacao de Perfumes
			self.gridEssencia_Perfume.SetCellValue(self.gridEssencia_Perfume.GetNumberRows() - 1, 1, essenciaP[7]) #adiciona o id de Essencias
			self.gridEssencia_Perfume.SetReadOnly(self.gridEssencia_Perfume.GetNumberRows() - 1, 0, True) #Informa que a coluna 0 (ID) é somente leitura


	# Handlers for FrameEssencias_Perfume events.
	def fecharFrame( self, event ):
		self.Show(False)